// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  name               String?
  email              String       @unique
  hashedPassword     String?
  role               GlobalRole   @default(CUSTOMER)
  twitterToken       String?
  twitterSecretToken String?
  twitterBio         String?
  twitterUsername    String?
  twitterId          String?
  stripeCustomerId   String?      @unique
  price              String?
  subscriptionStatus String?      @default("incomplete")
  subscriptionId     String?
  tokens             Token[]
  memberships        Membership[]
  sessions           Session[]
}

model TwitterAccount {
  id                               Int                              @id @default(autoincrement())
  createdAt                        DateTime                         @default(now())
  updatedAt                        DateTime                         @updatedAt
  twitterToken                     String?
  twitterSecretToken               String?
  twitterBio                       String?
  twitterUsername                  String?
  twitterId                        String?
  organization                     Organization                     @relation(fields: [organizationId], references: [id])
  organizationId                   Int
  relationships                    Relationship[]
  stagedRelationships              RelationshipStaging[]
  directMessages                   DirectMessage[]
  tags                             Tag[]
  twitterDataPulls                 TwitterDataPull[]
  twitterAccountStatuses           TwitterAccountStatus[]
  twitterAccountHistoricalStatuses TwitterAccountStatusHistorical[]
}

model Organization {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  name               String?
  stripeCustomerId   String?          @unique
  price              String?
  subscriptionStatus String?          @default("incomplete")
  subscriptionId     String?
  trial              Trial?
  trialId            Int?
  memberships        Membership[]
  twitterAccounts    TwitterAccount[]
}

model Membership {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           MembershipRole @default(USER)
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int
  user           User           @relation(fields: [userId], references: [id])
  userId         Int
  // When the user joins, we will clear out the name and email and set the user.
  invitedName    String?
  invitedEmail   String?

  @@unique([organizationId, invitedEmail])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String

  type      TokenType
  expiresAt DateTime
  sentTo    String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
}

enum RelationshipType {
  FOLLOWER
  FOLLOWING
  MUTUAL
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model DirectMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  to        String
  from      String
  status    String?

  twitterAccount   TwitterAccount? @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
}

model Tag {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  value         String
  realtionship  Relationship @relation(fields: [twitterAccountId, twitterUserId], references: [twitterAccountId, twitterUserId])
  twitterUserId String
  TwitterUser   TwitterUser? @relation(fields: [twitterUserId], references: [twitterId])


  twitterAccount   TwitterAccount? @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
}

model TwitterUser {
  twitterId           String                @id
  username            String?
  name                String
  bio                 String
  profilePictureUrl   String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  relationships       Relationship[]
  stagedRelationships RelationshipStaging[]
  tags                Tag[]

}

model Relationship {
  type          RelationshipType
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  twitterUser   TwitterUser      @relation(fields: [twitterUserId], references: [twitterId])
  twitterUserId String
  status        String           @default("")
  tags          Tag[]

  twitterAccount   TwitterAccount? @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int

  @@id([twitterAccountId, twitterUserId])
}

model RelationshipStaging {
  type      RelationshipType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  twitterUser   TwitterUser @relation(fields: [twitterUserId], references: [twitterId])
  twitterUserId String

  twitterAccount   TwitterAccount? @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
  @@id([twitterAccountId, twitterUserId, type])
}

model TwitterDataPull {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  twitterAccount   TwitterAccount?  @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
  relationshipType RelationshipType
  paginationToken  String?
}

model Trial {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int
  totalDMs       Int           @default(100)
  usedDMs        Int           @default(0)
}

model TwitterAccountStatus {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  twitterAccount   TwitterAccount?  @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
  relationshipType RelationshipType
  status           ProcessingStatus
  before           Int?
  after            Int?
  paginationToken  String?

  @@unique([twitterAccountId, relationshipType])
}

model TwitterAccountStatusHistorical {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  twitterAccount   TwitterAccount?  @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
  relationshipType RelationshipType
  status           ProcessingStatus
  before           Int?
  after            Int?
}

enum ProcessingStatus {
  NOT_STARTED
  PROCESSING
  COMPLETE
}
