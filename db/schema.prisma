// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]

}

// --------------------------------------

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String?      @unique
  hashedPassword String?
  role           GlobalRole   @default(CUSTOMER)
  tokens         Token[]
  memberships    Membership[]
  sessions       Session[]
}

model TwitterAccount {
  id                       Int                              @id @default(autoincrement())
  createdAt                DateTime                         @default(now())
  updatedAt                DateTime                         @updatedAt
  twitterToken             String?
  twitterSecretToken       String?
  twitterBio               String?
  twitterUsername          String?
  twitterName              String?
  twitterProfilePictureUrl String?
  twitterId                String?                          @unique
  consentStatus            ConsentStatus                    @default(PROVISIONAL)
  organization             Organization?                    @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId           Int?
  subscriptions            TwitterAccountsInSubscriptions[]
}

enum ConsentStatus {
  APPROVED
  PROVISIONAL
  DECLINED
}

model Organization {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  name               String?
  stripeCustomerId   String?          @unique
  price              String?
  subscriptionStatus String?          @default("incomplete")
  subscriptionId     String?
  planType           PlanType         @default(FREE)
  memberships        Membership[]
  twitterAccounts    TwitterAccount[]
  subscriptions      Subscription[]
}

enum PlanType {
  FREE
  PERSONAL
  COMMUNITY
  PROFESSIONAL
}

model Membership {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           MembershipRole @default(USER)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  // When the user joins, we will clear out the name and email and set the user.
  invitedName    String?
  invitedEmail   String?

  @@unique([organizationId, invitedEmail])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String

  type      TokenType
  expiresAt DateTime
  sentTo    String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model TwitterUser {
  twitterId         String         @id
  username          String?
  name              String
  bio               String
  profilePictureUrl String
  friends           Int            @default(0)
  followers         Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  likes             Tweet[]        @relation("liked")
  retweets          Tweet[]        @relation("retweeted")
  tweets            Tweet[]        @relation("wrote")
  subscriptions     Subscription[]

}

model TwitterAccountsInSubscriptions {
  twitterAccount   TwitterAccount   @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
  subscription     Subscription     @relation(fields: [subscriptionId], references: [id])
  subscriptionId   Int
  type             SubscriptionType

  @@id([twitterAccountId, subscriptionId, type])
}

model Tweet {
  tweetId        String            @id
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  tweetCreatedAt DateTime
  message        String
  likedBy        TwitterUser[]     @relation("liked")
  retweetedBy    TwitterUser[]     @relation("retweeted")
  inResponseTo   Tweet?            @relation(name: "responses", fields: [inResponseToId], references: [tweetId])
  inResponseToId String?
  responses      Tweet[]           @relation(name: "responses")
  author         TwitterUser       @relation(name: "wrote", fields: [authorId], references: [twitterId])
  authorId       String
  collections    TweetCollection[]
}

enum SubscriptionCadence {
  DAILY
  WEEKLY
  MONTHLY
}

enum SubscriptionType {
  PERSONAL
  COMMUNITY
  BUSINESS
  FREE
  SELF
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model Subscription {
  id                     Int                              @id @default(autoincrement())
  createdAt              DateTime                         @default(now())
  updatedAt              DateTime                         @updatedAt
  owner                  Organization                     @relation(fields: [ownerId], references: [id])
  ownerId                Int
  collections            TweetCollection[]
  cadence                SubscriptionCadence              @default(WEEKLY)
  twitterUsers           TwitterUser[]
  twitterAccounts        TwitterAccountsInSubscriptions[]
  name                   String                           @default("Subscription")
  type                   SubscriptionType                 @default(PERSONAL)
  status                 SubscriptionStatus               @default(ACTIVE)
  nextDelieveryScheduled DateTime?
}

model TweetCollection {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  name               String            @default("Tweet Collection")
  tweets             Tweet[]
  subscription       Subscription?     @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  subscriptionId     Int?
  parentCollection   TweetCollection?  @relation(name: "parentChildCollection", fields: [parentCollectionId], references: [id])
  parentCollectionId Int?
  childCollections   TweetCollection[] @relation("parentChildCollection")
}

model Email {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  to        String
  from      String
  subject   String
  body      String
  htmlBody  String
  status    EmailStatus

}

enum EmailStatus {
  QUEUED
  PROCESSING
  SENT
  ERROR
}
