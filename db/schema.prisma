// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id                 Int             @id @default(autoincrement())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  name               String?
  email              String          @unique
  hashedPassword     String?
  role               UserRole        @default(USER)
  twitterToken       String?
  twitterSecretToken String?
  twitterBio         String?
  twitterUsername    String?
  twitterId          String?
  stripeCustomerId   String?         @unique
  price              String?
  subscriptionStatus String?         @default("incomplete")
  tokens             Token[]
  sessions           Session[]
  relationships      Relationship[]
  directMessages     DirectMessage[]
  tags               Tag[]

}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String

  type      TokenType
  expiresAt DateTime
  sentTo    String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
}

enum RelationshipType {
  FOLLOWER
  FOLLOWING
  MUTUAL
}

enum UserRole {
  USER
  ADMIN
}

model DirectMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  to        String
  from      String
  status    String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int
}

model Tag {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  value         String
  twitterUser   TwitterUser @relation(fields: [twitterUserId], references: [twitterId])
  twitterUserId String
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
}

model TwitterUser {
  twitterId         String         @id
  username          String?
  name              String
  bio               String
  profilePictureUrl String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  relationships     Relationship[]
  tags              Tag[]

}

model Relationship {
  type          RelationshipType
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  User          User             @relation(fields: [userId], references: [id])
  userId        Int
  twitterUser   TwitterUser      @relation(fields: [twitterUserId], references: [twitterId])
  twitterUserId String
  status        String           @default("")

  @@id([userId, twitterUserId, type])
}
