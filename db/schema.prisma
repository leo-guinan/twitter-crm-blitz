// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]

}

// --------------------------------------

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String?      @unique
  hashedPassword String?
  role           GlobalRole   @default(CUSTOMER)
  tokens         Token[]
  memberships    Membership[]
  sessions       Session[]
}

model TwitterAccount {
  id                       Int                              @id @default(autoincrement())
  createdAt                DateTime                         @default(now())
  updatedAt                DateTime                         @updatedAt
  twitterToken             String?
  twitterSecretToken       String?
  twitterBio               String?
  twitterUsername          String?
  twitterName              String?
  twitterProfilePictureUrl String?
  twitterId                String?                          @unique
  consentStatus            ConsentStatus                    @default(PROVISIONAL)
  organization             Organization?                    @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId           Int?
  subscriptions            TwitterAccountsInSubscriptions[]
  likes                    Tweet[]                          @relation("likes")
  retweets                 Tweet[]                          @relation("retweets")
  tweets                   Tweet[]                          @relation("tweets")
  accountReports           TwitterAccountRefreshReport[]
  rateLimited              Boolean                          @default(false)
  communityMemberships     CommunityMembership[]
  primaryEngagments        DailyEngagementRecord[]          @relation("primary")
  engagmentRecords         DailyEngagementRecord[]          @relation("engaging")
  directMessagesSent       DirectMessageEvent[]             @relation("sendingAccount")
  directMessagesReceived   DirectMessageEvent[]             @relation("receivingAccount")
  dataFields               DataField[]
  dataFieldValues          DataFieldValue[]
  slug                     String?                          @unique
  offSiteSubscribers       OffSiteSubscriber[]
  tweetsToProcess          TweetsToProcess[]
  twitterAccountsToProcess TwitterAccountToProcess[]
}

enum ConsentStatus {
  APPROVED
  PROVISIONAL
  DECLINED
}

model Organization {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  name               String?
  stripeCustomerId   String?          @unique
  price              String?
  subscriptionStatus String?          @default("incomplete")
  subscriptionId     String?
  plan               Plan             @relation(fields: [planId], references: [id], onDelete: SetNull)
  planId             Int              @default(1)
  memberships        Membership[]
  twitterAccounts    TwitterAccount[]
  subscriptions      Subscription[]
}

enum PlanType {
  FREE
  PERSONAL
  COMMUNITY
  PROFESSIONAL
  CREATOR
}

model Membership {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           MembershipRole @default(USER)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  // When the user joins, we will clear out the name and email and set the user.
  invitedName    String?
  invitedEmail   String?

  @@unique([organizationId, invitedEmail])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String

  type      TokenType
  expiresAt DateTime
  sentTo    String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model TwitterAccountsInSubscriptions {
  twitterAccount   TwitterAccount   @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
  subscription     Subscription     @relation(fields: [subscriptionId], references: [id])
  subscriptionId   Int
  type             SubscriptionType

  @@id([twitterAccountId, subscriptionId, type])
}

model Tweet {
  tweetId         String              @id
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  tweetCreatedAt  DateTime
  message         String
  likes           TwitterAccount[]    @relation("likes")
  retweets        TwitterAccount[]    @relation("retweets")
  inResponseTo    Tweet?              @relation(name: "responses", fields: [inResponseToId], references: [tweetId])
  inResponseToId  String?
  responses       Tweet[]             @relation(name: "responses")
  authorAccount   TwitterAccount?     @relation(name: "tweets", fields: [authorAccountId], references: [id])
  authorAccountId Int?
  collections     TweetCollection[]
  tweetReports    TweetLookupReport[]
  dataFieldValues DataFieldValue[]
  tweetsToProcess TweetsToProcess[]
}

enum SubscriptionCadence {
  DAILY
  WEEKLY
  MONTHLY
  ONCE
}

enum SubscriptionType {
  PERSONAL
  COMMUNITY
  BUSINESS
  FREE
  SELF
  CREATOR
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model Plan {
  id                        Int            @id @default(autoincrement())
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  name                      String         @unique
  displayName               String         @default("Plan")
  description               String
  monthlyPrice              Decimal        @default(0)
  yearlyPrice               Decimal        @default(0)
  type                      PlanType
  stripeMonthlyPlanId       String?
  stripeAnnualPlanId        String?
  personalSubscriptionQuota Int
  organizations             Organization[]
}

model Subscription {
  id                     Int                              @id @default(autoincrement())
  createdAt              DateTime                         @default(now())
  updatedAt              DateTime                         @updatedAt
  owner                  Organization                     @relation(fields: [ownerId], references: [id])
  ownerId                Int
  collections            TweetCollection[]
  cadence                SubscriptionCadence              @default(WEEKLY)
  twitterAccounts        TwitterAccountsInSubscriptions[]
  name                   String                           @default("Subscription")
  type                   SubscriptionType                 @default(PERSONAL)
  status                 SubscriptionStatus               @default(ACTIVE)
  nextDelieveryScheduled DateTime?
}

model TweetCollection {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  name               String            @default("Tweet Collection")
  tweets             Tweet[]
  subscription       Subscription?     @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  subscriptionId     Int?
  parentCollection   TweetCollection?  @relation(name: "parentChildCollection", fields: [parentCollectionId], references: [id])
  parentCollectionId Int?
  childCollections   TweetCollection[] @relation("parentChildCollection")
}

model Email {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  to        String
  from      String
  subject   String
  body      String
  htmlBody  String
  status    EmailStatus

}

enum EmailStatus {
  QUEUED
  PROCESSING
  SENT
  ERROR
}

enum TwitterAccountRefreshReportStatus {
  QUEUED
  PROCESSING
  COMPLETE
  ERROR
}

enum TweetLookupStatus {
  PROCESSING
  COMPLETE
  ERROR
}

model DailyRefreshReport {
  id                     Int                           @id @default(autoincrement())
  createdAt              DateTime                      @default(now())
  updatedAt              DateTime                      @updatedAt
  twitterAccountsUpdated TwitterAccountRefreshReport[]

}

model TwitterAccountRefreshReport {
  id                      Int                               @id @default(autoincrement())
  createdAt               DateTime                          @default(now())
  updatedAt               DateTime                          @updatedAt
  twitterAccount          TwitterAccount?                   @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId        Int
  status                  TwitterAccountRefreshReportStatus
  containingDailyReport   DailyRefreshReport?               @relation(fields: [containingDailyReportId], references: [id])
  containingDailyReportId Int?
  tweetsLookedUp          TweetLookupReport[]
  errorMessage            String?
}

model TweetLookupReport {
  id                                      Int                          @id @default(autoincrement())
  createdAt                               DateTime                     @default(now())
  updatedAt                               DateTime                     @updatedAt
  tweetLookedUp                           Tweet                        @relation(fields: [tweetLookedUpId], references: [tweetId], onDelete: SetNull)
  tweetLookedUpId                         String
  tweetLookupStatus                       TweetLookupStatus
  containingTwitterAccountRefreshReport   TwitterAccountRefreshReport? @relation(fields: [containingTwitterAccountRefreshReportId], references: [id])
  containingTwitterAccountRefreshReportId Int?
  errorMessage                            String?
}

model Community {
  id               Int                   @id @default(autoincrement())
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  name             String                @default("Community")
  description      String
  communityMembers CommunityMembership[]
  slug             String?               @unique
  followers        CommunityFollower[]
}

model CommunityMembership {
  id          Int                     @id @default(autoincrement())
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  community   Community               @relation(fields: [communityId], references: [id])
  communityId Int
  account     TwitterAccount          @relation(fields: [accountId], references: [id])
  accountId   Int
  role        CommunityMembershipRole @default(MEMBER)
}

model CommunityFollower {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
  email       String
  firstName   String?

  @@unique([email, communityId])
}

enum CommunityMembershipRole {
  MEMBER
  ADMIN
  OWNER
}

model DailyEngagementRecord {
  id                       Int            @id @default(autoincrement())
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  engagementScore          Int            @default(0)
  weightedEngagementScore  Int            @default(0)
  primaryTwitterAccount    TwitterAccount @relation(name: "primary", fields: [primaryTwitterAccountId], references: [id])
  primaryTwitterAccountId  Int
  engagingTwitterAccount   TwitterAccount @relation(name: "engaging", fields: [engagingTwitterAccountId], references: [id])
  engagingTwitterAccountId Int
  reportRun                String

}

model DirectMessageEvent {
  twitterDMId        String         @id
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  sendingAccount     TwitterAccount @relation(name: "sendingAccount", fields: [sendingAccountId], references: [id])
  sendingAccountId   Int
  receivingAccount   TwitterAccount @relation(name: "receivingAccount", fields: [receivingAccountId], references: [id])
  receivingAccountId Int
  messageTimestamp   DateTime

}

model DataField {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  name             String
  twitterAccount   TwitterAccount   @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
  values           DataFieldValue[]


}

model DataFieldValue {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  dataField        DataField      @relation(fields: [dataFieldId], references: [id])
  dataFieldId      Int
  tweet            Tweet          @relation(fields: [tweetId], references: [tweetId])
  tweetId          String
  twitterAccount   TwitterAccount @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int

}

model OffSiteSubscriber {
  id                 Int                         @id @default(autoincrement())
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  email              String
  verified           Boolean                     @default(false)
  twitterAccounts    TwitterAccount[]
  verificationNeeded OffSiteSubscribersToVerify?
}

model OffSiteSubscribersToVerify {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  offSiteSubscriber   OffSiteSubscriber @relation(fields: [offSiteSubscriberId], references: [id])
  offSiteSubscriberId Int
  verificationString  String            @unique
}

enum TweetAction {
  LIKE
  RETWEET
  COMMENT
  QUOTE
}

model TweetsToProcess {
  id                      Int            @id @default(autoincrement())
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  tweet                   Tweet          @relation(fields: [tweetId], references: [tweetId])
  tweetId                 String
  twitterAccount          TwitterAccount @relation(fields: [twitterAccountTwitterId], references: [twitterId])
  twitterAccountTwitterId String
  action                  TweetAction

  @@unique([twitterAccountTwitterId, tweetId, action])
}

model TwitterAccountToProcess {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  twitterAccount   TwitterAccount @relation(fields: [twitterAccountId], references: [id])
  twitterAccountId Int
}
